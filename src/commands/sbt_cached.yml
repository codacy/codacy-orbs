description: >
  Run a generic Sbt command restoring the cache before and saving it after

parameters:
  cmd_name:
    description: "Name of the step"
    type: string
    default: ""
  cmd:
    description: "SBT command to run"
    type: string
    default: ""
  steps_before_sbt:
    description: "Steps to run before Sbt starts"
    type: steps
    default: []
  steps:
    description: "SBT steps to run"
    type: steps
    default: []
  save_cache:
    description: "Save the cache after the command is executed"
    type: boolean
    default: true
  cache_prefix:
    description: "The prefix of cache to be used"
    type: string
    default: sbt-cache-032020
  store_test_results:
    description: "Whether to upload test results to CircleCI"
    type: boolean
    default: false
  store_test_results_path:
    description: "Test results path for CircleCI upload"
    type: string
    default: "~/workdir"
  no_output_timeout:
    description: "The time to wait for the command without output"
    type: string
    default: "10m"
  use_sbt_native_client:
    description: "Use the sbt thin client"
    type: boolean
    default: false

steps:

  - restore_cache:
      keys:
        - << parameters.cache_prefix >>-{{ .Branch }}-{{ checksum "build.sbt" }}-{{ .Environment.CIRCLE_SHA1 }}
        - << parameters.cache_prefix >>-{{ .Branch }}-{{ checksum "build.sbt" }}
        - << parameters.cache_prefix >>-{{ .Branch }}
        - << parameters.cache_prefix >>

  - run:
      name: Unpacking Caches
      command: |
        if [[ -f "$HOME/targets.zip" ]]; then
          echo "cache found"
          if [[ -d "target" ]]; then
            echo "local workspace exists, skipping"
          else
            echo "unpacking cache" && unzip -q ~/targets.zip
          fi
        else
          echo "no cache found"
        fi
  - when:
      condition: <<parameters.steps_before_sbt>>
      steps:
        - <<parameters.steps_before_sbt>>
  - when:
      condition: << parameters.use_sbt_native_client >>
      steps:
        - run:
            name: Background sbt server
            command: |
              set +eo pipefail
              SBT_NATIVE_CLIENT=false sbt
              # if previous command failed create file
              if [ $? -ne 0 ]; then
                touch .sbt-failed-to-start
              fi
            background: true
        - run:
            name: Set SBT_NATIVE_CLIENT env variable
            command: echo 'export SBT_NATIVE_CLIENT=true' >> $BASH_ENV
        - run:
            name: Wait for sbt server to start
            command: |
              #!/bin/bash

              seconds=0
              while ! ls .bsp/sbt.json 2> /dev/null ;
              do
                  if [ -f .sbt-failed-to-start ]; then
                    echo "sbt failed to start"
                    exit 1
                  fi
                  max_seconds=100
                  if [ $seconds -gt $max_seconds ]; then
                    echo "sbt didn't start in $max_seconds seconds. timing out."
                    exit 1
                  fi
                  echo "Waiting for sbt to start..."
                  sleep 1
                  seconds=$((seconds+1))
              done

              echo "sbt is ready"
  - when:
      condition: <<parameters.steps>>
      steps:
        - <<parameters.steps>>
  - when:
      condition:
        and:
          - <<parameters.cmd>>
          - <<parameters.cmd_name>>
      steps:
        - run:
            name: << parameters.cmd_name >>
            no_output_timeout: << parameters.no_output_timeout >>
            command: << parameters.cmd >>
  - when:
      condition:
        and:
          - <<parameters.cmd>>
          - not: <<parameters.cmd_name>>
      steps:
        - run:
            name: SBT command - << parameters.cmd >>
            no_output_timeout: << parameters.no_output_timeout >>
            command: << parameters.cmd >>

  - when:
      condition: << parameters.store_test_results >>
      steps:
        - store_test_results:
            path: << parameters.store_test_results_path >>

  - when:
      condition: <<parameters.save_cache>>
      steps:
        - run:
            name: CleanCache
            command: |
              set +eo pipefail
              find $HOME/.sbt -name "*.lock" | xargs rm | true
              find $HOME/.ivy2 -name "ivydata-*.properties" | xargs rm | true
              # delete all jars inside target directories
              find . -name *.jar -type f -exec rm {} \;
              # zip all targets to a single file
              find . -name target -type d -prune -print | zip -r -q -1 -@ ~/targets.zip

        - save_cache:
            key: << parameters.cache_prefix >>-{{ .Branch }}-{{ checksum "build.sbt" }}-{{ .Environment.CIRCLE_SHA1 }}
            paths:
              - "~/.cache"
              - "~/targets.zip"
