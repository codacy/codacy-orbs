description: >
    "A helm command to be executed, optionally with AWS credentials on the AWS executor
    with kubeconfig created for the provided cluster"

parameters:
  cmd:
    description: "The command to run"
    type: string
  use_cluster:
    description: "Setup kubeconfig for the cluster and run commands in it"
    type: boolean
    default: false
  aws_profile:
    description: "The AWS profile to be used"
    type: string
    default: "default"
  region:
    description: "The AWS region for the deployment"
    type: string
    default: eu-west-1
  cluster_name:
    description: "The name of the cluster"
    type: string
    default: "codacy-eks-cluster"
  persist_to_workspace:
    description: "Whether to persist the workspace or not at the end of the job"
    type: boolean
    default: false
  notify_slack:
    description: "Whether to send slack notifications"
    type: boolean
    default: false
  notify_channel:
    description: "Slack channel where to send notifications"
    type: string
    default: $SLACK_DEFAULT_CHANNEL
  notify_failure_mentions:
    description: "Slack handles to mention on the failure notification"
    type: string
    default: ''
  reset_dev_env_replica_count:
    description: "Resets the replica count of each deployment in the specified dev env"
    type: string
    default: ''

executor: aws

environment:
  AWS_PROFILE: << parameters.aws_profile >>
  AWS_DEFAULT_REGION: << parameters.region >>

steps:
  - attach_workspace:
      at: ~/workdir

  - when:
      condition: << parameters.use_cluster>>
      steps:
        - run_aws:
            cmd_name: Setup kubeconfig context for the cluster
            deploy: false
            cmd: |
              aws eks update-kubeconfig --name << parameters.cluster_name >>
              kubectl config get-contexts

        - run_aws:
            cmd_name: Helm command - << parameters.cmd >>
            deploy: true
            cmd: << parameters.cmd >>

  - unless:
      condition: << parameters.use_cluster>>
      steps:
        - run:
            name: Helm command - << parameters.cmd >>
            command: << parameters.cmd >>

  - when:
      condition: << parameters.persist_to_workspace >>
      steps:
        - persist_to_workspace:
            root: ~/workdir
            paths:
              - '*'
  - when:
      condition: << parameters.notify_slack >>
      steps:
        - slack/notify:
            event: fail
            channel: << parameters.notify_channel >>
            mentions: << parameters.notify_failure_mentions >>
            template: basic_fail_1
        - slack/notify:
            event: pass
            channel: << parameters.notify_channel >>
            template: success_tagged_deploy_1

  - when:
      condition: << parameters.reset_dev_env_replica_count>>
      steps:
        - run_aws:
            cmd_name: Reset the replica count of each deployment for the specified env
            deploy: false
            cmd: |
              if [[ "<< parameters.reset_dev_env_replica_count >>" =~ ^dev-env.* ]]; then
                RELEASES=$(helm ls -n $<< parameters.reset_dev_env_replica_count >> -o json | jq -r '.[].name' | grep -v 'ingress\|ragnaros\|codacy-seed')
                for CHART in $RELEASES ; do
                  DEPLOYMENTS=$(helm get manifest -n $<< parameters.reset_dev_env_replica_count >> $CHART | yq -o json | jq -r '. | select(.kind == "Deployment") | .metadata.name')
                  for DEPLOYMENT in $DEPLOYMENTS ; do
                    REPLICA_COUNT=$(helm get manifest -n $<< parameters.reset_dev_env_replica_count >> $CHART | yq -o json | jq -r ". | select( (.kind == \"Deployment\") and (.metadata.name ==\"$DEPLOYMENT\") ) | .spec.replicas" )
                    echo kubectl scale --replicas=$REPLICA_COUNT deployment/$DEPLOYMENT -n $<< parameters.reset_dev_env_replica_count >>
                  done
                done
              else
                echo "The reset_dev_env_replica_count parameter must start with dev-env"
                exit 1
              fi
