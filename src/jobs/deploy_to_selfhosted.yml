description: "A job to deploy latest dev components to self-hosted"

executor: do

steps:
  - deploy:
      name: Set cluster to digital ocean
      command: |
        doctl auth init -t $DO_TOKEN &>/dev/null
        doctl kubernetes cluster kubeconfig save "$DOKS_CLUSTER_NAME" --set-current-context
  - deploy:
      name: Poll for installation availability
      command: |
        helm poll -r codacy
  - deploy:
      name: Trigger workflow to deploy dev components
      command: |
        function trigger_remote_workflow {
            response=$(curl -XPOST -s -H 'Accept: application/json' -H 'x-attribution-login: string' -H 'x-attribution-actor-id: string' -H 'Content-type: application/json' -d '{"branch": "master"}' 'https://circleci.com/api/v2/project/gh/codacy/chart/pipeline' -H "Circle-Token: $CIRCLE_CI_GITHUB_TOKEN")
            echo $response
        }

        function get_workflow {
            response=$(curl -s -H 'Accept: application/json' -H 'Content-type: application/json' "https://circleci.com/api/v2/pipeline/$1/workflow" -H "Circle-Token: $CIRCLE_CI_GITHUB_TOKEN")
            echo $response
        }

        function get_workflow_status {
            response=$(get_workflow $1 | jq -r '.items[0].status')
            echo $response
        }

        function get_remote_workflow_url {
            # for some reason, circleci returns a different workflow ID between the trigger workflow and the get workflow api methods.
            # the id we want to build the workflow url is the one returned by the get workflow api endpoint.
            id=$(echo $1 | jq -r '.items[0].id')
            number=$(echo $1 | jq -r '.items[0].pipeline_number')
            echo "https://app.circleci.com/pipelines/github/codacy/chart/$number/workflows/$id"
        }

        function wait_for_workflow_started {
            timeout -t 10 bash -c "while [[ \"$(echo $remoteWorkflow | jq -r 'isempty(.items[])')\" == "true" ]]; do sleep 2s; echo \"Waiting for remote workflow to start...\"; done" || false
        }

        function wait_for_workflow_terminated {
            timeout -t 300 bash -c "while [[ \"$(echo $remoteWorkflow | jq -r '.items[0].status=="pending" or .items[0].status=="running"')\" == "true" ]]; do sleep 30s; echo \"Waiting for remote workflow to complete...\"; remoteWorkflow=$(get_workflow $workflowID); done" || false
        }

        response=$(trigger_remote_workflow)
        workflowState=$(echo $response | jq -r '.state')
        workflowID=$(echo $response | jq -r '.id')

        if [ "$workflowState" != "pending" ] && [ "$workflowState" != "running" ] ; then
            echo "Remote workflow execution failed abruptly!"
            echo $response
            exit 1
        fi

        remoteWorkflow=$(get_workflow $workflowID)
        wait_for_workflow_started
        remoteWorkflow=$(get_workflow $workflowID)
        workflowURL=$(get_remote_workflow_url $remoteWorkflow)
        echo "Running chart workflow id: $workflowID - $workflowURL"
        wait_for_workflow_terminated
        status=$(get_workflow_status $workflowID)
        if [ "$status" == "success" ] ; then
            echo "Remote workflow $workflowID execution successful. - $workflowURL"
            exit 0
        else
            echo "Remote workflow $workflowID execution failed ($status). - $workflowURL"
            exit 1
        fi
