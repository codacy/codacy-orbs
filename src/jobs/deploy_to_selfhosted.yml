description: "A job to deploy latest dev components to self-hosted"

executor: do

parameters:
  release:
    description: The helm release name to be installed.
    type: string
    default: "codacy-dev"
  namespace:
    description: The target namespace for the release.
    type: string
    default: "codacy-dev"

steps:
  - deploy:
      name: Set cluster to digital ocean
      command: |
        doctl auth init -t $DO_TOKEN &>/dev/null
        doctl kubernetes cluster kubeconfig save "$DOKS_CLUSTER_NAME" --set-current-context
  - deploy:
      name: Poll for installation availability
      command: |
        helm poll -r << parameters.release >> -n << parameters.namespace >>
  - deploy:
      name: Trigger workflow to deploy dev components
      command: |
        function trigger_remote_workflow {
            response=$(curl -XPOST -s -H 'Accept: application/json' -H 'x-attribution-login: string' -H 'x-attribution-actor-id: string' -H 'Content-type: application/json' -d '{"branch": "master"}' 'https://circleci.com/api/v2/project/gh/codacy/chart/pipeline' -H "Circle-Token: $CIRCLE_CI_GITHUB_TOKEN")
            echo $response
        }

        function get_workflow_from_pipeline {
            response=$(curl -s -H 'Accept: application/json' -H 'Content-type: application/json' "https://circleci.com/api/v2/pipeline/$1/workflow" -H "Circle-Token: $CIRCLE_CI_GITHUB_TOKEN")
            echo $response
        }

        function get_workflow {
            response=$(curl -s -H 'Accept: application/json' -H 'Content-type: application/json' "https://circleci.com/api/v2/workflow/$1" -H "Circle-Token: $CIRCLE_CI_GITHUB_TOKEN")
            echo $response
        }

        function get_workflow_status {
            response=$(get_workflow $1 | jq -r '.status')
            echo $response
        }

        function get_remote_workflow_url {
            workflow=$(get_workflow $1)
            id=$(echo $workflow | jq -r '.id')
            number=$(echo $workflow | jq -r '.pipeline_number')
            echo "https://app.circleci.com/pipelines/github/codacy/chart/$number/workflows/$id"
        }

        function wait_for_workflow_started {
            while [[ "$(get_workflow_from_pipeline $pipelineID | jq -r 'isempty(.items[])')" == "true" ]]; do sleep 2s; echo "Waiting for remote workflow to start..."; done
        }

        function wait_for_workflow_terminated {
            status=$(get_workflow_status $workflowID)
            while [[ "$status" == "running" ]]; do sleep 10s; echo "Waiting for remote workflow to complete... ($status)"; status=$(get_workflow_status $workflowID); done

            if [ "$status" == "success" ] ; then
                echo "Remote workflow $workflowID execution successful. - $workflowURL"
                exit 0
            else
                echo "Remote workflow $workflowID execution failed ($status). - $workflowURL"
                exit 1
            fi
        }

        response=$(trigger_remote_workflow)
        workflowState=$(echo $response | jq -r '.state')
        pipelineID=$(echo $response | jq -r '.id')

        if [ "$workflowState" != "pending" ] && [ "$workflowState" != "running" ] ; then
            echo "Remote workflow execution failed abruptly!"
            echo $response
            exit 1
        fi

        wait_for_workflow_started
        remoteWorkflow=$(get_workflow_from_pipeline $pipelineID)
        workflowID=$(echo $remoteWorkflow | jq -r '.items[0].id')
        workflowURL=$(get_remote_workflow_url $workflowID)

        echo "Running chart workflow id: $workflowID - $workflowURL"
        wait_for_workflow_terminated

