description: "A job to deploy latest dev components to self-hosted"

executor: do

parameters:
  chart_name:
    description: The helm chart name to be installed.
    type: string
    default: "default-release"
  release_name:
    description: The helm release name to be created on the cluster for the given chart_name.
    type: string
    default: ""
  environment:
    description: The target environment for the release [dev / sandbox / release].
    type: string
    default: "dev"
  git_tag:
    description: The tag (or branch or commit id) from where to get the values files.
    default: "master"
    type: "string"
  helm_install_extra_flags:
    description: Extra parameters to be passed to the helm install command.
    type: string
    default: ""
  helm_channel:
    description: The helm channel from which the component chart will be retrieved [unstable / incubator / stable].
    type: string
    default: "unstable"
  chart_version:
    description: "Version of the chart"
    type: string
    default: "$(cat .version)"

steps:
  - attach_workspace:
      at: ~/workdir

  - run:
      name: Set cluster to digital ocean
      command: |
        doctl auth init -t $DO_TOKEN &>/dev/null
        doctl kubernetes cluster kubeconfig save "$DOKS_CLUSTER_NAME" --set-current-context
  - run:
      name: Add unstable repository
      command: |
        helm repo add codacy-<<parameters.helm_channel>> https://charts.codacy.com/<<parameters.helm_channel>>
        helm repo update
  - run:
      name: Fetch values files
      command: |
        curl -s -o values.yaml "https://raw.githubusercontent.com/codacy/chart/<<parameters.git_tag>>/codacy/values.yaml"
        curl -s -o values-selfhosted.yaml "https://raw.githubusercontent.com/codacy/chart/<<parameters.git_tag>>/.do/values.yaml"
        curl -s -o values-production.yaml "https://raw.githubusercontent.com/codacy/chart/<<parameters.git_tag>>/codacy/values-production.yaml"
  - run:
      name: Prepare terraform files
      command: |
        echo -e "credentials \"app.terraform.io\" { \n  token = \"$TF_AUTH_TOKEN\" \n}" > ./terraformrc
        echo -e "terraform {\n  required_version = \"~> 0.12\"\n  backend \"remote\" {\n    hostname = \"app.terraform.io\"\n    organization = \"codacy\"\n\n    workspaces {\n      prefix = \"codacy-do-\"\n    }\n  }\n}" > config.tf
  - run:
      name: Replace database values
      command: |
        echo '1' | TF_IN_AUTOMATION=1 TF_CLI_CONFIG_FILE=./terraformrc terraform init -input=false -reconfigure
        TF_IN_AUTOMATION=1 TF_CLI_CONFIG_FILE=./terraformrc terraform workspace select postgres-<<parameters.environment>>
        TF_IN_AUTOMATION=1 TF_CLI_CONFIG_FILE=./terraformrc terraform output -json > terraform_outputs.json
        host=$(cat terraform_outputs.json | jq -r '.db_cluster_host | .value')
        port=$(cat terraform_outputs.json | jq -r '.db_cluster_port | .value')
        username=$(cat terraform_outputs.json | jq -r '.db_cluster_username | .value')
        password=$(cat terraform_outputs.json | jq -r '.db_cluster_password | .value')
        sed -i "s/<--- codacy-db-username --->/$username/g; s/<--- codacy-db-password --->/$password/g; s/<--- codacy-db-host --->/$host/g; s/<--- codacy-db-port --->/$port/g;" values-selfhosted.yaml
        sed -i "s/<--- codacy-db-username --->/$username/g; s/<--- codacy-db-password --->/$password/g; s/<--- codacy-db-host --->/$host/g; s/<--- codacy-db-port --->/$port/g;" values-production.yaml
  - run_skip_ssh:
      name: Install component
      cmd: |
        if [ -z "<< parameters.release_name >>" ] ; then
          RELEASE_NAME="<< parameters.chart_name >>"
        else
          RELEASE_NAME="<< parameters.release_name >>"
        fi
        helm upgrade --install $RELEASE_NAME codacy-<<parameters.helm_channel>>/<<parameters.chart_name>> \
        --devel \
        --atomic \
        --timeout=600s \
        --namespace codacy-<<parameters.environment>> \
        -f values.yaml \
        -f values-production.yaml \
        -f values-selfhosted.yaml \
        --version << parameters.chart_version >> \
        --set global.imagePullSecrets[0].name=docker-credentials \
        --set global.play.cryptoSecret=$SHARED_PLAY_CRYPTO_SECRET \
        --set global.akka.sessionSecret=$SHARED_AKKA_SESSION_SECRET \
        --set global.filestore.contentsSecret=$SHARED_PLAY_CRYPTO_SECRET \
        --set global.filestore.uuidSecret=$SHARED_PLAY_CRYPTO_SECRET \
        --set global.cacheSecret=$SHARED_PLAY_CRYPTO_SECRET \
        --set global.codacy.license=$CODACY_LICENSE \
        --set global.codacy.url=$CODACY_URL_DEV \
        --set global.codacy.crow.url=$CODACY_URL_DEV/monitoring \
        --set global.codacy.backendUrl=$CODACY_URL_DEV \
        --set global.metrics.serviceMonitor.enabled=true \
        --set global.metrics.grafana.enabled=true \
        --set global.listener.nfsserverprovisioner.storageClass.name="codacy-<<parameters.environment>>-listener-cache-class" \
        --set global.features.cloneSubmodules=true \
        --set global.crow.config.passwordAuth.username=$CROW_USERNAME \
        --set global.crow.config.passwordAuth.password=$CROW_PASSWORD \
        <<parameters.helm_install_extra_flags>>
