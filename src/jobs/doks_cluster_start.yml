description: >
    "A job to start a new long-lived cluster in Digital Ocean. If a cluster
    with the same name exists, you can force the cluster to be destroyed
    and recreated."

executor: digitalocean

parameters:
  cluster_name:
    description: "The name of the cluster"
    type: string
    default: "codacy-doks-cluster-nightly"
  kubernetes_version:
    description: "The kubernetes version in the cluster."
    type: string
    default: "1.15"
  tf_workspace:
    description: "The terraform workspace where the tf_state
    of the cluster will be saved."
    type: string
    default: "nightly"
  destroy_cluster:
    description: "If true, will delete the currently existing cluster
    with the same name and start a new cluster. Default is false."
    type: boolean
    default: false
  start_cluster_command:
    description: "The command to run when then cluster should be started."
    type: string
  destroy_cluster_command:
    description: "The command to run when then cluster should be destroyed."
    type: string

environment:
  DOKS_CLUSTER_NAME: << parameters.cluster_name >>
  DO_TF_WORKSPACE: << parameters.tf_workspace >>
  K8S_VERSION: << parameters.kubernetes_version >>
steps:
  - attach_workspace:
      at: ~/
  - run:
      name: "Setup DO Credentials"
      command: doctl auth init -t $DO_TOKEN &>/dev/null
  - when:
      condition: << parameters.destroy_cluster >>
      steps:
        - run:
            name: "Destroy cluster if necessary"
            command: |
              doctl kubernetes cluster list | grep << parameters.cluster_name >> | grep << parameters.kubernetes_version >>;
              if [ "$?" = "0" ]; then
                  << parameters.destroy_cluster_command >>
              else
                echo "Nothing to destroy..."
                exit 0
              fi
  - run:
      name: "Start Cluster"
      command: |
          doctl kubernetes cluster list | grep << parameters.cluster_name >> | grep << parameters.kubernetes_version >>;
          if [ "$?" = "1" ]; then
              << parameters.start_cluster_command >>
          else
            echo "<< parameters.cluster_name>> already exists!"
            exit 1
          fi
