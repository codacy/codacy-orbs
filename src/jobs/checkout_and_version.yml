description: Checkout and write the current and previous version files

parameters:
  write_sbt_version:
    description: If a version.sbt file should be written after version is generated
    type: boolean
    default: false
  overwrite_package_json_version:
    description: If the version in `package.json` should be overwritten after version is generated
    type: boolean
    default: false
  update_submodules:
    type: boolean
    default: false
    description: Updates git submodules if true
  dev_branch:
    type: string
    default: "dev"
    description: Overrides the default dev branch (dev).
  release_branch:
    type: string
    default: "master"
    description: Overrides the default release branch (master).
  version_prefix:
    type: string
    default: ""
    description: Version prefix ("v" to tag versions like `v1.0.0`).

executor: versioning

steps:
  
  - checkout

  - run:
      name: Set version
      command: /bin/git-version --dev-branch "<<parameters.dev_branch>>" --release-branch "<<parameters.release_branch>>" --version-prefix "<<parameters.version_prefix>>" > .version

  - run:
      name: Current version
      command: cat .version

  - run:
      name: Set previous version
      command: /bin/git-version --previous-version --dev-branch "<<parameters.dev_branch>>" --release-branch "<<parameters.release_branch>>" --version-prefix "<<parameters.version_prefix>>" > .previous_version

  - run:
      name: Previous version
      command: cat .previous_version

  - when:
      condition: <<parameters.write_sbt_version>>
      steps:
        - run:
            name: Set SBT version
            command: echo "ThisBuild / version := \"$(cat .version)\"" > version.sbt

  - when:
      condition: <<parameters.overwrite_package_json_version>>
      steps:
        - run:
            name: Set package.json version
            command: |
              mv package.json temp.json
              apk add --no-cache jq
              jq -r ".version |= \"$(cat .version)\"" temp.json > package.json
              rm temp.json

  - when:
      condition: <<parameters.update_submodules>>
      steps:
        - run:
            name: Update git submodules
            command: git submodule update --init --recursive

  - persist_to_workspace:
      root: ~/workdir
      paths:
        - '*'
