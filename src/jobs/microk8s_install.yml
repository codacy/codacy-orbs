description: "Install in microk8s"

parameters:
  codacy_version:
    description: "Codacy version to install"
    type: string
    default: "latest"
  codacy_helm_repo_name:
    description: "Name of the helm repo from where to a codacy_version: codacy-stable, codacy-unstable, or codacy-incubator"
    type: string
    default: "codacy-stable"
  use_chart_source:
    description: "If true then install Codacy using the chart source"
    type: boolean
    default: true
  clone_chart_source:
    description: "If true then clone the chart source for later usage"
    type: boolean
    default: true
  chart_dir_path:
    description: "Path to the chart dir"
    type: string
    default: "chart/"
  chart_branch:
    description: "Codacy chart branch/tag/ref to install"
    type: string
    default: "master"
  helm_version:
    description: "Helm version used to install the chart"
    type: string
    default: "v2.15.1"
  microk8s_channel:
    description: "Microk8s version used"
    type: string
    default: "1.15/stable"
  microk8s_extra_addons:
    description: "Additional microk8s addons to install"
    type: string
    default: ""
  wait_ready:
    description: "Wait for codacy to be ready (using 'wait_commands')"
    type: boolean
    default: true
  wait_ready_timeout:
    description: "Time before exiting with error while waiting for Codacy pods to be ready"
    type: integer
    default: 1800
  extra_preinstall_commands:
    description: "Additional commands to run before installing codacy to microk8s"
    type: string
    default: ""
  extra_postinstall_commands:
    description: "Additional commands to run after installing codacy to microk8s"
    type: string
    default: ""
  microk8s_values_content:
    description: "Content for microk8s-values.yaml, used to override chart default values"
    type: string
    default: |
      global:
        imagePullSecrets:
          - name: docker-credentials
      listener:
        persistence:
          claim:
            size: 8Gi
        nfsserverprovisioner:
          persistence:
            size: 10Gi
      minio:
        persistence:
          size: 10Gi
      rabbitmq-ha:
        replicaCount: 1

executor: machine
resource_class: large

steps:
  - attach_workspace:
      at: ~/workdir

  - run:
      name: Setup microk8s and helm
      command: |
        set -x

        # install storage addon dependencies
        sudo apt update && sudo apt install nfs-common -y

        # enable traffic forwarding, which might not be done automatically for earlier microk8s versions
        # see https://github.com/ubuntu/microk8s/tree/1.12#my-pods-cant-reach-the-internet-but-my-microk8s-host-machine-can
        sudo iptables -P FORWARD ACCEPT

        # install microk8s and selected addons
        sudo snap install microk8s --classic --channel << parameters.microk8s_channel >>
        if [[ -z "$(echo $PATH | grep snap)" ]] ; then export PATH=$PATH:/snap/bin ; fi
        sudo microk8s.start && sudo microk8s.status --wait-ready
        sudo microk8s.enable ingress dns storage << parameters.microk8s_extra_addons >> && sudo microk8s.status --wait-ready

        # restart to make sure the apparmor profile is correctly created
        # see https://github.com/ubuntu/microk8s/issues/493#issuecomment-498167435
        sudo microk8s.stop && sudo microk8s.start && sudo microk8s.status --wait-ready

        # Wait for addons to be ready, particularly kube-dns and hostpath-provisioner, or pods will quickly enter a crashloop
        sudo microk8s.kubectl wait -n kube-system --for=condition=Ready pod -l k8s-app=kube-dns --timeout=300s
        sudo microk8s.kubectl wait -n kube-system --for=condition=Ready pod -l k8s-app=hostpath-provisioner --timeout=300s
        sudo microk8s.kubectl wait -n default --for=condition=Ready pod -l app=default-http-backend --timeout=300s
        sudo microk8s.kubectl wait -n default --for=condition=Ready pod -l name=nginx-ingress-microk8s --timeout=300s

        # install helm
        HELM_PKG=helm-<< parameters.helm_version >>-linux-amd64.tar.gz
        wget https://get.helm.sh/$HELM_PKG
        tar xvzf $HELM_PKG
        sudo mv linux-amd64/tiller linux-amd64/helm /usr/local/bin
        rm -rvf $HELM_PKG linux-amd64/

        # install tiller and wait for it to be ready
        sudo microk8s.kubectl create serviceaccount --namespace kube-system tiller
        sudo microk8s.kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
        sudo helm init --service-account tiller
        sudo microk8s.kubectl -n kube-system wait --for=condition=Ready pod -l name=tiller --timeout=300s

  - run:
      name: Create values file
      command: |
        set -x
        cat \<< END_VALUES > microk8s-values.yaml
        << parameters.microk8s_values_content >>
        END_VALUES

  - run:
      name: Setup helm repos
      command: |
        set -x
        sudo helm repo add codacy-stable    https://charts.codacy.com/stable
        sudo helm repo add codacy-unstable  https://charts.codacy.com/unstable
        sudo helm repo add codacy-incubator https://charts.codacy.com/incubator
        sudo helm repo add codacy-external  https://charts.codacy.com/external

  - when:
      condition: << parameters.clone_chart_source >>
      steps:
        - run:
            name: Get codacy chart
            command: |
              set -x
              git clone https://github.com/codacy/chart.git
              cd << parameters.chart_dir_path >>
              git checkout << parameters.chart_branch >>

  - run:
      name: Add namespace and docker secret
      command: |
        set -x
        if [[ -z "$(echo $PATH | grep snap)" ]] ; then export PATH=$PATH:/snap/bin ; fi

        sudo microk8s.kubectl create namespace codacy
        sudo microk8s.kubectl create secret docker-registry docker-credentials \
          --docker-username=$DOCKER_USERNAME --docker-password=$DOCKER_PASSWORD -n codacy

  - run:
      name: Run additional pre-install commands (if any)
      command: |
        set -x
        if [[ -z "$(echo $PATH | grep snap)" ]] ; then export PATH=$PATH:/snap/bin ; fi
        << parameters.extra_preinstall_commands >>

  - when:
      condition: << parameters.use_chart_source >>
      steps:
        - deploy:
            name: Install Codacy to microk8s from source
            command: |
              set -x
              if [[ -z "$(echo $PATH | grep snap)" ]] ; then export PATH=$PATH:/snap/bin ; fi

              cd << parameters.chart_dir_path >>
              sudo helm dep up codacy/
              sudo helm upgrade --install codacy codacy/ --namespace codacy -f ../microk8s-values.yaml

  - unless:
      condition: << parameters.use_chart_source >>
      steps:
        - deploy:
            name: Install Codacy to microk8s from chart repo
            command: |
              set -x
              if [[ "<< parameters.codacy_version >>" == "latest" ]] ; then
                sudo helm upgrade --install codacy << parameters.codacy_helm_repo_name >>/codacy --namespace codacy -f microk8s-values.yaml
              else
                sudo helm upgrade --install codacy << parameters.codacy_helm_repo_name >>/codacy --namespace codacy -f microk8s-values.yaml --version << parameters.codacy_version >>
              fi

  - when:
      condition: << parameters.wait_ready >>
      steps:
        - run:
            name: Wait for all Codacy pods to be ready
            command: |
              # earlier kubectl versions don't have the userful '--all' flag
              if [[ "$(sudo microk8s.kubectl version --short --client | cut -d. -f2)" == "13" ]] ; then
                CODACY_PODS=$(sudo microk8s.kubectl get pods -n codacy -o jsonpath='{.items[*].metadata.name}')
                sudo microk8s.kubectl wait --for=condition=Ready pods ${CODACY_PODS} -n codacy --timeout=<< parameters.wait_ready_timeout >>s
              else
                sudo microk8s.kubectl wait --for=condition=Ready pods --all -n codacy --timeout=<< parameters.wait_ready_timeout >>s
              fi

              # show state before exiting
              sudo microk8s.kubectl get pods -n codacy

  - run:
      name: Run additional post-install commands (if any)
      command: |
        set -x
        if [[ -z "$(echo $PATH | grep snap)" ]] ; then export PATH=$PATH:/snap/bin ; fi
        << parameters.extra_postinstall_commands >>
