description: "Install a chart to microk8s"

parameters:
  chart_name:
    description: "Name of the chart to install"
    type: string
    default: "codacy"
  chart_version:
    description: "Chart version to install. If empty then the latest is installed"
    type: string
    default: ""
  helm_repo:
    type: string
    default: "https://charts.codacy.com/stable"
  helm_version:
    description: "Helm version used to install the chart"
    type: string
    default: "v3.2.0"
  microk8s_channel:
    description: "Microk8s version used"
    type: string
    default: "1.15/stable"
  namespace:
    description: "Namespace where to install the chart"
    type: string
    default: "codacy"
  microk8s_values_content:
    description: "Content for microk8s-values.yaml, used to override chart default values"
    type: string
    default: ""
  microk8s_wait_retries:
    description: "Number of retries to wait for microk8s to be ready"
    type: integer
    default: 20
  kubectl_timeout:
    description: "Time to wait for kubectl commands"
    type: integer
    default: 300
  helm_timeout:
    description: "Time to wait for helm commands"
    type: integer
    default: 300
  helm_install_extra_flags:
    description: "Extra flags added to the end of the helm install command"
    type: string
    default: ""
  helm_test:
    description: "Should run helm test"
    type: boolean
    default: true
  docker_username:
    description: "Used to create the docker credentials in the namespace"
    type: string
    default: ""
  docker_password:
    description: "Used to create the docker credentials in the namespace"
    type: string
    default: ""

executor: machine
resource_class: xlarge

steps:
  - attach_workspace:
      at: ~/workdir

  - run:
      name: Install microk8s and addon dependencies
      command: |
        sudo apt update && sudo apt install nfs-common -y

        # enable traffic forwarding, which might not be done automatically for earlier microk8s versions
        # see https://github.com/ubuntu/microk8s/tree/1.12#my-pods-cant-reach-the-internet-but-my-microk8s-host-machine-can
        sudo iptables -P FORWARD ACCEPT

        # install microk8s and selected addons
        sudo snap install microk8s --classic --channel << parameters.microk8s_channel >>
        export PATH=$PATH:/snap/bin

  - run:
      name: Install microk8s plugins and wait until they are ready
      command: |
        function microk8s_wait_ready() {
          # Microk8s status is flaky, so we must make sure it is up and running
          local RETRIES=$1
          while [[ $RETRIES -gt 0 ]] ; do
            echo  "Waiting for microk8s to become ready... [$RETRIES]"
            set +e
            sudo microk8s.status --wait-ready
            local MICROK8S_STATUS=$?

            sudo microk8s.kubectl wait --for condition=Ready nodes --all
            sudo microk8s.kubectl get pods --all-namespaces
            local K8S_STATUS=$?
            set -e

            if [[ $MICROK8S_STATUS -eq 0 ]] && [[ $K8S_STATUS -eq 0 ]] ; then
              sleep 15
              echo "microk8s ready"
              return 0
            fi

            RETRIES=$((RETRIES-1))
          done
          return 1
        }

        sudo microk8s.start && microk8s_wait_ready << parameters.microk8s_wait_retries >>

        # enabling plugins one at a time to prevent a race condition
        # see https://github.com/ubuntu/microk8s/issues/706
        sudo microk8s.enable dns && microk8s_wait_ready << parameters.microk8s_wait_retries >>
        sudo microk8s.enable storage && microk8s_wait_ready << parameters.microk8s_wait_retries >>
        sudo microk8s.enable ingress && microk8s_wait_ready << parameters.microk8s_wait_retries >>

        sudo sudo mkdir -p /var/snap/microk8s/current/args
        sudo sh -c  "echo "--allow-privileged=true" >> /var/snap/microk8s/current/args/kube-apiserver"

        # restart to make sure the apparmor profile is correctly created
        # see https://github.com/ubuntu/microk8s/issues/493#issuecomment-498167435
        sudo microk8s.stop && sudo microk8s.start && microk8s_wait_ready << parameters.microk8s_wait_retries >>

        # Wait for kube-dns and hostpath-provisioner, or pods will quickly enter a crashloop
        sudo microk8s.kubectl wait -n kube-system --for=condition=Ready pod -l k8s-app=kube-dns --timeout=<< parameters.kubectl_timeout >>s
        sudo microk8s.kubectl wait -n kube-system --for=condition=Ready pod -l k8s-app=hostpath-provisioner --timeout=<< parameters.kubectl_timeout >>s

  - run:
      name: Install Helm
      command: |
        HELM_PKG=helm-<< parameters.helm_version >>-linux-amd64.tar.gz
        wget https://get.helm.sh/$HELM_PKG
        tar xvzf $HELM_PKG
        sudo mv linux-amd64/helm /usr/local/bin
        if [ "$(echo <<parameters.helm_version>> | cut -f1-1 -d'.' )" == "v2" ]; then
          echo "Helm2 installed. Moving Tiller."
          sudo mv linux-amd64/tiller /usr/local/bin
        else
          echo "No Tiller to move."
        fi
        rm -rvf $HELM_PKG linux-amd64/

  - run:
      name: Install Helm dependencies
      command: |
        if [ "$(echo <<parameters.helm_version>> | cut -f1-1 -d'.' )" == "v2" ]; then
          echo "Helm2 installed. Installing Tiller..."
          sudo microk8s.kubectl create serviceaccount --namespace kube-system tiller
          sudo microk8s.kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
          sudo sh -c 'microk8s.config > ~/.kube/config'
          sudo helm init --wait --service-account tiller
          sudo microk8s.kubectl -n kube-system wait --for=condition=Ready pod -l name=tiller --timeout=<< parameters.kubectl_timeout >>s
        else
          echo "No dependencies to install for this Helm version."
        fi

  - run:
      name: Create values file
      command: |
        cat \<< END_VALUES > microk8s-values.yaml
        << parameters.microk8s_values_content >>
        END_VALUES

  - deploy:
      name: Install to microk8s from chart repo
      command: |
        sudo helm repo add default << parameters.helm_repo >>
        sudo helm repo update
        sudo microk8s.kubectl create namespace << parameters.namespace >>

        if [ ! -z "<< parameters.docker_username >>" ]; then
          sudo microk8s.kubectl create secret docker-registry docker-credentials --docker-username=<< parameters.docker_username >> --docker-password=<< parameters.docker_password >> --namespace << parameters.namespace >>
        fi

        # if chart_version is an empty string then the latest version of the chart is installed
        if [ "$(echo <<parameters.helm_version>> | cut -f1-1 -d'.' )" == "v2" ]; then
          sudo helm install --debug --name << parameters.chart_name >> default/<< parameters.chart_name >> --timeout << parameters.helm_timeout >> \
            --namespace << parameters.namespace >> -f microk8s-values.yaml --version "<< parameters.chart_version >>" --atomic << parameters.helm_install_extra_flags >>
        else
          sudo bash -c 'sudo microk8s.config > ~/.kube/config'
          sudo helm install --debug << parameters.chart_name >> default/<< parameters.chart_name >> --timeout <<parameters.helm_timeout >>s \
            --namespace << parameters.namespace >> -f microk8s-values.yaml --version "<< parameters.chart_version >>" --atomic << parameters.helm_install_extra_flags >>
        fi
        sudo microk8s.kubectl get events --namespace << parameters.namespace >>

  - when:
      condition: << parameters.helm_test >>
      steps:
        - deploy:
            name: Test installation
            command: |
              if [ "$(echo <<parameters.helm_version>> | cut -f1-1 -d'.' )" == "v2" ]; then
                sudo helm test << parameters.chart_name >>
              else
                sudo helm test << parameters.chart_name >> -n << parameters.namespace >>
              fi

              printf "\n\nTrying to run an analysis...."

              # lets give it two minutes to cool down
              sleep 120

              printf "Only works for play crypto secret = \"TEST_STRING_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789_0123456789\"\n\n"

              echo "Creating an API token for user with id=1"
              sudo microk8s.kubectl exec -it codacy-postgres-0 \
              -n << parameters.namespace >> -- psql "postgresql://codacy:codacy@localhost/accounts" \
              -c "INSERT INTO \"UniqueName\" (\"name\") VALUES ('codacycircleci'); INSERT INTO \"Account\" (\"isAdmin\", \"isActive\", \"mainEmail\", \"uniqueNameId\") VALUES (TRUE,TRUE,'circleci@codacy.com', 10) ; INSERT INTO \"ApiTokens\" (\"accountId\",\"clientId\",\"secretId\") VALUES  ('10','fc15acbf7b5aab4afe19c588c2ce1e1cc86742a0c08ed7fb540190019059eb0d','cef5fa6242d5c519e59836ee1b7f3afe93864d082ec0b9aaa822072c668a5bff3dab8829bf48159718252e725549701a514896b0efe09136b2f9b3a0ac1721db');"

              echo "Setup a user plan for the user"
              sudo microk8s.kubectl exec -it codacy-postgres-0 \
              -n << parameters.namespace >> -- psql "postgresql://codacy:codacy@localhost/accounts" \
              -c "INSERT INTO \"UserPaymentPlan\" (\"planId\", \"users\", \"value\") VALUES (1, 1, 0) RETURNING id;"

              echo "Add user to organization"
              sudo microk8s.kubectl exec -it codacy-postgres-0 \
              -n << parameters.namespace >> -- psql "postgresql://codacy:codacy@localhost/accounts" \
              -c "INSERT INTO \"Teams_Organization\"(\"subscriptionId\", \"billingEmail\", \"sync\", \"provider\", \"remoteName\", \"remoteIdentifier\", \"isSingleAccount\") VALUES (1, 'circleci@codacy.com', 'Auto', 'gh', 'codacycircleci', 42476340, true) RETURNING id; INSERT INTO \"Teams_OrganizationMember\" (\"organizationId\", \"userId\", \"permission\" ) VALUES (1, 10, 'AdminLevel') RETURNING id;"


              echo "Setup user token"
              sudo microk8s.kubectl exec -it codacy-postgres-0 \
              -n << parameters.namespace >> -- psql "postgresql://codacy:codacy@localhost/accounts" \
              -c "INSERT INTO \"AccountTokens\"(\"userId\", \"provider\", \"token\", \"timestamp\", \"scopes\", \"refreshToken\", \"expiryDate\") VALUES (10, 'GithubReadOnly', 'f6cb5fd18b2d1815e667e73fecdc8ccd14588f76b1ecc7854f292085c84ff15819fe15f0009bea0d1d7793263ee639e7', '$(date)', null, null, null) RETURNING id;"

              sudo microk8s.kubectl exec -it codacy-postgres-0 \
              -n << parameters.namespace >> -- psql "postgresql://codacy:codacy@localhost/accounts" \
              -c "INSERT INTO \"account_github\"(\"user_id\", \"github_id\") VALUES (10, 42476340) RETURNING id;"


              echo "Port forward codacy-api"
              sudo microk8s.kubectl port-forward deployment/codacy-api -n << parameters.namespace >> 9000 --pod-running-timeout=5m0s &
              sleep 5

              echo "Add a project to user with id=1 using the token"
              curl -X POST http://localhost:9000/api/v3/repositories \
                -H 'Content-Type: application/json' \
                -H 'Accept: application/json' \
                -H 'caller: string' \
                -H 'api-token:fWz6plit8jzFDLylH0tx' \
                --data '{"repositoryFullPath": "codacycircleci/microk8s-test","provider": "gh"}'

              # Wait for project analysed
              sleep 20
              COUNT=0
              ATTEMPTS=120
              OUT=''
              SUCCESS='{"data":[{"action":"clone","complete":true},{"action":"createTasks","complete":true},{"action":"runMetrics","complete":true},{"action":"runPatterns","complete":true},{"action":"createOverviews","complete":true}]}'
              until $([ $OUT = $SUCCESS ]  || [[ $COUNT -eq $ATTEMPTS ]]); do
                OUT=$(curl -X GET http://localhost:9000/api/v3/analysis/organizations/gh/codacycircleci/repositories/microk8s-test/analysis-progress -H 'Accept: application/json' -H 'api-token:fWz6plit8jzFDLylH0tx');
                echo $OUT;
                echo -e "$(( COUNT++ ))... \c";
                printf "\n\n ## WORKER LOGS ## \n\n"
                sudo microk8s.kubectl logs -l app=worker -c worker --namespace << parameters.namespace >> --tail=1000 || true
                sleep 10;
              done
              if [[ $COUNT -eq $ATTEMPTS ]]; then
                echo -e "Could not verify that the analysis ran"
                printf "\n\nPrint stuff to help debug\n\n"

                printf "\n\n ## NAMESPACE EVENTS ## \n\n"
                sudo microk8s.kubectl get events --namespace << parameters.namespace >>

                printf "\n\n ## WORKER-MANAGER LOGS ## \n\n"
                sudo microk8s.kubectl logs deployment/codacy-worker-manager -n << parameters.namespace >>

                echo "Could not verify that the analysis ran"
                (exit 1)
              fi
